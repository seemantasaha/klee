; Query 0 -- Type: InitialValues, Instructions: 15
; This file conforms to SMTLIBv2 and was generated by KLEE
(set-logic QF_AUFBV )
; Array declarations
; Constraints
; Constraints and QueryExpr
(assert
        true
)
(check-sat)
(exit)
;   OK -- Elapsed: 1.380516e-02s
;   Solvable: true

; Query 1 -- Type: InitialValues, Instructions: 15
; This file conforms to SMTLIBv2 and was generated by KLEE
(set-option :produce-models true)
(set-logic QF_AUFBV )
; Array declarations
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
; Constraints
; Constraints and QueryExpr
(assert
        (= 
           false
           (= 
              (_ bv0 32)
              (concat 
                      (select 
                              a
                              (_ bv3 32)
                      )
                      (concat 
                              (select 
                                      a
                                      (_ bv2 32)
                              )
                              (concat 
                                      (select 
                                              a
                                              (_ bv1 32)
                                      )
                                      (select 
                                              a
                                              (_ bv0 32)
                                      )
                              )
                      )
              )
           )
        )
)
(check-sat)
(get-value ( (select a (_ bv0 32) ) ) )
(get-value ( (select a (_ bv1 32) ) ) )
(get-value ( (select a (_ bv2 32) ) ) )
(get-value ( (select a (_ bv3 32) ) ) )
(exit)
;   OK -- Elapsed: 1.369106e-02s
;   Solvable: true
;     a = [255,0,0,0]

; Query 2 -- Type: InitialValues, Instructions: 23
; This file conforms to SMTLIBv2 and was generated by KLEE
(set-option :produce-models true)
(set-logic QF_AUFBV )
; Array declarations
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
; Constraints
; Constraints and QueryExpr
(assert
        (let
            (
             (?B1
                 (concat 
                         (select 
                                 a
                                 (_ bv3 32)
                         )
                         (concat 
                                 (select 
                                         a
                                         (_ bv2 32)
                                 )
                                 (concat 
                                         (select 
                                                 a
                                                 (_ bv1 32)
                                         )
                                         (select 
                                                 a
                                                 (_ bv0 32)
                                         )
                                 )
                         )
                 )
             )
            )
            (and 
                 (bvslt 
                        ?B1
                        (_ bv0 32)
                 )
                 (= 
                    false
                    (= 
                       (_ bv0 32)
                       ?B1
                    )
                 )
            )
        )
)
(check-sat)
(get-value ( (select a (_ bv0 32) ) ) )
(get-value ( (select a (_ bv1 32) ) ) )
(get-value ( (select a (_ bv2 32) ) ) )
(get-value ( (select a (_ bv3 32) ) ) )
(exit)
;   OK -- Elapsed: 1.239070e-02s
;   Solvable: true
;     a = [0,0,0,128]

